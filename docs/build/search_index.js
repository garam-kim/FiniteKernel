var documenterSearchIndex = {"docs":
[{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"EditURL = \"<unknown>/examples/finite_dimensional_kernel_herding.jl\"","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"using FrankWolfe\nusing Plots\nusing LinearAlgebra\nusing Random\nusing FiniteKernel\ninclude(joinpath(dirname(pathof(FrankWolfe)), \"../examples/plot_utils.jl\"))","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#Finite-dimensional-kernel-herding","page":"-","title":"Finite-dimensional kernel herding","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We focus on a specific kernel studied in (Bach et al.), that has a finite dimensional feature space. Let \\mathcal{Y} = {-1, 1}^d $ and","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"mathcalH= leftlbrace f colon mathcalY to mathbbR mid f(y) = langle f Phi(y) rangle_mathcalH text where  Phi(y)=(y yy^T) rightrbrace","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"The feature map is composed of y and of all of its pairwise products yy^T. i.e., Phi(y) = (y yy^T) = (y_1 y_2 y_1^2 y_1y_2 y_2y_1 y_2^2) for y = (y_1 y_2) in -1 1^2. For w x in mathcalH,","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"langle w x rangle_mathcalH = sum_i = 1^d w_i(y)x_i(y)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"defines inner product and (mathcalH langle cdot cdot rangle_mathcalH) is a Hilbert space. Moreover, the Hilbert space mathcalH is also a Reproducing Kernel Hilbert Space (RKHS) having the reproducing kernel","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"k(y z) = langle k(y x) k(z x) rangle_mathcalH","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"for all x y z in mathcalY.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"In this set-up, we compute the expectation","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"mu(z)  = mathbbE_p(y) Phi(y)(z) = sum_i=1^2^d p(y_i)Phi(y_i)(z) in mathcalC","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"such that sum_i=1^2^dp(y_i) = 1.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#Set-up","page":"-","title":"Set-up","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Below, we consider the case d = 2.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"dim = 2","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We compare different Frank-Wolfe algorithms for kernel herding in the Hilbert space mathcalH: the Frank-Wolfe algorithm with open loop step-size rule eta_t = frac2t+2 (FW-OL),and the Frank-Wolfe algorithm with short-step (FW-SS). The LMO in the here-presented kernel herding problem is implemented searching over mathcalY = -1 1^d.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"max_iterations = 2000\nmax_iterations_lmo = 2^dim\nlmo = MarginalPolytope(max_iterations_lmo)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#Uniform-distribution","page":"-","title":"Uniform distribution","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"First, we consider the uniform distribution p = 1, which results in the mean element being zero, that is, mu = 0.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"mu = ZeroMeanElement()\niterate = KernelHerdingIterate([1.0], [ones(Float64, dim)])\ngradient = KernelHerdingGradient(iterate, mu)\nf, grad = create_loss_function_gradient(mu)\n\nFW_OL = FrankWolfe.frank_wolfe(f, grad, lmo, iterate, line_search=FrankWolfe.Agnostic(), verbose=true, gradient=gradient, memory_mode=FrankWolfe.OutplaceEmphasis(), max_iteration=max_iterations, trajectory=true)\nFW_SS = FrankWolfe.frank_wolfe(f, grad, lmo, iterate, line_search=FrankWolfe.Shortstep(2), verbose=true, gradient=gradient, memory_mode=FrankWolfe.OutplaceEmphasis(), max_iteration=max_iterations, trajectory=true)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We plot the result","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"data = [FW_OL[end], FW_SS[end]]\nlabels = [\"FW-OL\", \"FW-SS\"]\nplot_trajectories(data, labels, xscalelog=true)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Observe that FW-SS converges linearly and convergence rate of mathcalO(1t^2) for FW-OL.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#Non-uniform-distribution","page":"-","title":"Non-uniform distribution","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Second, we consider a non-uniform distribution p(y) where","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"sum_i=1^2^dp(y_i) = 1","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Hence, we start with an arbitrary vectors:","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"rho = rand(Float64, 2^dim)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We then normalize the vectors to obtain a p that is indeed a distribution.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"p = get_distribution(rho)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We then run the experiments.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"mu = NonZeroMeanElement(p)\niterate = KernelHerdingIterate([1.0], [ones(Float64, dim)])\ngradient = KernelHerdingGradient(iterate, mu)\nf, grad = create_loss_function_gradient(mu)\n\nFW_OL = FrankWolfe.frank_wolfe(f, grad, lmo, iterate, line_search=FrankWolfe.Agnostic(), verbose=true, gradient=gradient, memory_mode=FrankWolfe.OutplaceEmphasis(), max_iteration=max_iterations, trajectory=true)\nFW_SS = FrankWolfe.frank_wolfe(f, grad, lmo, iterate, line_search=FrankWolfe.Shortstep(2), verbose=true, gradient=gradient, memory_mode=FrankWolfe.OutplaceEmphasis(), max_iteration=max_iterations, trajectory=true)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We plot the result","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"data = [FW_OL[end], FW_SS[end]]\nlabels = [\"FW-OL\", \"FW-SS\"]\nplot_trajectories(data, labels, xscalelog=true)","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#Conclusion","page":"-","title":"Conclusion","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"We presented two experiments which show how to use Frank-Wolfe algorithms to solve optimization problems in finite-dimensional Hilbert spaces.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html#References","page":"-","title":"References","text":"","category":"section"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Bach, F., Lacoste-Julien, S. and Obozinski, G., 2012, June. On the Equivalence between Herding and Conditional Gradient Algorithms. In ICML 2012 International Conference on Machine Learning.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"Wirth, E., Kerdreux, T. and Pokutta, S., 2022. Acceleration of Frank-Wolfe algorithms with open loop step-sizes. arXiv preprint arXiv:2205.12838.","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"","category":"page"},{"location":"examples/finite_dimensional_kernel_herding.html","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference.html","page":"API reference","title":"API reference","text":"Modules = [FiniteKernel]","category":"page"},{"location":"reference.html#FiniteKernel.KernelHerdingGradient","page":"API reference","title":"FiniteKernel.KernelHerdingGradient","text":"The gradient < x - μ, . > is represented by x and μ.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.KernelHerdingIterate","page":"API reference","title":"FiniteKernel.KernelHerdingIterate","text":"Kernel herding iterate.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.MarginalPolytope","page":"API reference","title":"FiniteKernel.MarginalPolytope","text":"The marginal polytope of the Wahba kernel.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.MeanElement","page":"API reference","title":"FiniteKernel.MeanElement","text":"MeanElement μ must implement dot with a functional.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.NonZeroMeanElement","page":"API reference","title":"FiniteKernel.NonZeroMeanElement","text":"μ =/= 0.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.ZeroMeanElement","page":"API reference","title":"FiniteKernel.ZeroMeanElement","text":"μ = 0.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#FiniteKernel.create_loss_function_gradient-Tuple{FiniteKernel.MeanElement}","page":"API reference","title":"FiniteKernel.create_loss_function_gradient","text":"Creates the loss function and the gradient function, given a MeanElement μ, that is,     1/2 || x - μ ||_H²      and     < x - μ, . >, respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#FiniteKernel.get_distribution-Tuple{Any}","page":"API reference","title":"FiniteKernel.get_distribution","text":"Returns valid distribution of the corresponding dimension.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#FiniteKernel.region_vertices-Tuple{Any}","page":"API reference","title":"FiniteKernel.region_vertices","text":"Constructs the vertices of the observation space.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#FrankWolfe.compute_extreme_point-Tuple{MarginalPolytope, KernelHerdingGradient}","page":"API reference","title":"FrankWolfe.compute_extreme_point","text":"Computes the extreme point in the Frank-Wolfe algorithm for kernel herding.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.dot-Tuple{Any, KernelHerdingIterate}","page":"API reference","title":"LinearAlgebra.dot","text":"Basic arithmetic for KernelHerdingIterate.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.dot-Tuple{KernelHerdingIterate, KernelHerdingGradient}","page":"API reference","title":"LinearAlgebra.dot","text":"Scalar product for KernelHerdingIterate with KernelHerdingGradient.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.dot-Tuple{KernelHerdingIterate, KernelHerdingIterate}","page":"API reference","title":"LinearAlgebra.dot","text":"Scalar product for two KernelHerdingIterates.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.dot-Tuple{KernelHerdingIterate, NonZeroMeanElement}","page":"API reference","title":"LinearAlgebra.dot","text":"Scalar product for KernelHerdingIterate with NonZeroMeanElement.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.dot-Union{Tuple{T}, Tuple{KernelHerdingIterate{T}, ZeroMeanElement}} where T","page":"API reference","title":"LinearAlgebra.dot","text":"Scalar product for KernelHerdingIterate with ZeroMeanElement.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.norm-Tuple{NonZeroMeanElement}","page":"API reference","title":"LinearAlgebra.norm","text":"Norm of NonZeroMeanElement.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#LinearAlgebra.norm-Tuple{ZeroMeanElement}","page":"API reference","title":"LinearAlgebra.norm","text":"Norm of ZeroMeanElement.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = FiniteKernel","category":"page"},{"location":"index.html#FiniteKernel","page":"Home","title":"FiniteKernel","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for FiniteKernel.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"See the example for a walkthrough.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"}]
}
